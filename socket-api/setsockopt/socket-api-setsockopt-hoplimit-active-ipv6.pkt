//
// Copyright (c) 2022 Michael Tuexen
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
// SUCH DAMAGE.
//

--ip_version=ipv6
--tolerance_usecs=50000

// Ensure that all relevant sysctl variables have their default variables.
 0.00 `sysctl -w net.inet.tcp.rfc1323=1`
+0.00 `sysctl -w net.inet.tcp.sack.enable=1`
+0.00 `sysctl -w net.inet.tcp.ecn.enable=2`
+0.00 `sysctl -w net.inet.tcp.rexmit_slop=200`
+0.00 `sysctl -w net.inet.tcp.rexmit_drop_options=0`
+0.00 `sysctl -w kern.ipc.maxsockbuf=2097152`
+0.00 `sysctl -w net.inet.tcp.recvspace=65536`
+0.00 `sysctl -w net.inet.tcp.sendspace=32768`
// Flush host cache.
+0.00 `sysctl -w net.inet.tcp.hostcache.purgenow=1`
// Create a TCP endpoint in the ESTABLISHED state.
+0.00 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
+0.00 fcntl(3, F_GETFL) = 0x02 (flags O_RDWR)
+0.00 fcntl(3, F_SETFL, O_RDWR | O_NONBLOCK) = 0
+0.00 setsockopt(3, IPPROTO_IPV6, IPV6_UNICAST_HOPS, [4], 4) = 0
+0.00 connect(3, ..., ...) = -1 EINPROGRESS (Operation now in progress)
+0.00 > (hlim 4) S     0:0(0)                win 65535 <mss 1440,nop,wscale 6,sackOK,TS val 100 ecr 0>
+0.10 < (hlim 3) S.    0:0(0)       ack    1 win 32767 <mss 1440,sackOK,eol,eol>
+0.00 > (hlim 4)  .    1:1(0)       ack    1 win 65535
// Verify that there are no errors pending at the socket layer.
+0.10 getsockopt(3, SOL_SOCKET, SO_ERROR, [0], [4]) = 0
// Send some data, change the hoplimit and send some data again.
+0.00 send(3, ..., 1440, 0) = 1440
+0.00 > (hlim 4) P.    1:1441(1440) ack    1 win 65535
+0.10 < (hlim 3)  .    1:1(0)       ack 1441 win 32767
+0.00 setsockopt(3, IPPROTO_IPV6, IPV6_UNICAST_HOPS, [6], 4) = 0
+0.00 send(3, ..., 1440, 0) = 1440
+0.00 > (hlim 6) P. 1441:2881(1440) ack    1 win 65535
+0.10 < (hlim 3)  .    1:1(0)       ack 2881 win 32767
// Tear it down.
+0.00 close(3) = 0
+0.00 > (hlim 6) F. 2881:2881(0)    ack    1 win 65535
+0.10 < (hlim 3) F.    1:1(0)       ack 2882 win 32767
+0.00 > (hlim 6)  . 2882:2882(0)    ack    2 win 65535
